
echo "starting grub.cfg"

sleep -i 2

if [ "$grub_platform" = "efi" ] ; then
    echo "setting up EFI graphical console"
    sleep -i 2
    insmod efi_gop
    insmod efi_uga
    insmod font

    if loadfont ${prefix}/font.pf2 ; then
        insmod gfxterm
        set gfxmode=auto
        set gfxpayload=keep
        terminal_output gfxterm
    fi
else
    echo "setting up console"
    terminal_input console
    terminal_output console
fi

sleep -i 2

if [ "$grub_platform" = "efi" ] ; then
    echo "Skipping serial port set up, it may lock-up EFI boot"
elif keystatus --ctrl ; then
    echo "Ctrl pressed, skipping serial port set up"
else
    echo "setting up serial port (boot with Ctrl pressed to skip this)"
    serial --unit=0 --speed=115200
    terminal_input --append serial
    terminal_output --append serial
fi

sleep -i 2

timout=15
default=0

echo "building menu"

#
# [ -e ... ] test won't work for network files
# we need to check this in a different way
#
function have_file {

    rel_path="$1"

    if [ "$netboot" = "yes" ] ; then
        if [ -n "$pldnr_net_files" ] ; then
            regexp ":${rel_path}:" "$pldnr_net_files"
        else
            return 0
        fi
    else
        [ -e "${pldnr_prefix}/$rel_path" ]
    fi
}

#
# To have simple code in the menu entries
# which can be easily edited by the user
#
function load_pldnr {

    boot_prefix=$1
    shift

    echo "loading ${pldnr_prefix}/${boot_prefix}/vmlinuz..."
    linux "${pldnr_prefix}/${boot_prefix}/vmlinuz" "$@"

    initrds=""
    for module in $preload_modules ; do
        if [ "$module" = "init" ] ; then
            continue
        fi
        if have_file "${boot_prefix}/${module}.cpi" ; then
            initrds="$initrds ${pldnr_prefix}/${boot_prefix}/${module}.cpi"
        fi
    done

    echo "loading ${pldnr_prefix}/${boot_prefix}/init.cpi $initrds..."
    initrd "${pldnr_prefix}/${boot_prefix}/init.cpi" $initrds

    echo "booting..."
}

function pldnr_menuentry {

    echo "pldnr_menuentry $*"

    title="$1"
    net_ok="$2"
    bits="$3"
    modules="$4"
    options="$5"

    if [ "$net_ok" = "no" -a "$netboot" = "yes" ] ; then
        return 1
    elif have_file pld-nr-$bits/vmlinuz ; then

        menuentry "$title" --source "preload_modules=\"$modules\"
load_pldnr pld-nr-$bits $options
"
    else
        return 1
    fi
}

function other_menuentry {

    title="$1"
    net_ok="$2"
    loader="$3"
    file="$4"
    options="$5"

    if [ "$net_ok" = "no" -a "$netboot" = "yes" ] ; then
        return 1
    elif have_file "$file" ; then
        menuentry "$title" --source "$loader ${pldnr_prefix}/$file $options"
    else
        return 1
    fi
}


for bits in 64 32 ; do
    pldnr_menuentry \
                "PLD New Rescue $bits (minimum RAM)" \
                no $bits ""

    pldnr_menuentry \
                "PLD New Rescue $bits (all in RAM)" \
                yes $bits "base basic rescue"

    pldnr_menuentry \
                "PLD New Rescue $bits (serial console, minimum RAM)" \
                no $bits "" \
                "console=tty0 console=ttyS0,115200n8"

    pldnr_menuentry \
                "PLD New Rescue $bits (serial console, all in RAM)" \
                yes $bits "base basic rescue" \
                "console=tty0 console=ttyS0,115200n8"
done

other_menuentry \
            "Memtest86" \
            yes linux16 boot/memtest86

other_menuentry \
            "Memtest86+" \
            yes linux16 boot/memtest86_p

other_menuentry \
            "EFI Shell" \
            no chainloader "($efi_part)/EFI/SHELL${efi_suffix}.EFI"

# vi: et sw=4 sts=4
